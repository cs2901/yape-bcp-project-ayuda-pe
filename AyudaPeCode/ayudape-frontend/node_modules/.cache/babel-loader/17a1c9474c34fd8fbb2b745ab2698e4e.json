{"ast":null,"code":"// constants\nimport { FUNCTION_NAME_REGEXP, IS_PRODUCTION, LIFECYCLE_METHODS } from './constants';\n/**\n * @function createSingleLifecycleMethodDecorator\n *\n * @description\n * partial application that will return the decorator for the\n * specific method based on the function passed\n *\n * @param {function} method the method to add as a lifecycle method\n * @param {function} addMethods the method that will add the lifecycle methods to the component\n * @returns {function(ReactComponent, Object): ReactComponent} the decorator for a specific method\n */\n\nexport var createSingleLifecycleMethodDecorator = function createSingleLifecycleMethodDecorator(method, addMethods) {\n  return function (fn, options) {\n    var _addMethods;\n\n    if (typeof fn !== 'function') {\n      throw new TypeError('Parameter passed to ' + method + ' must be a function.');\n    }\n\n    return addMethods((_addMethods = {}, _addMethods[method] = fn, _addMethods), options);\n  };\n};\n/**\n * @function getComponentDisplayName\n *\n * @description\n * get the name to display for the component\n *\n * @param {ReactComponent} ReactComponent the component to get the name of\n * @returns {string} the display name of ReactComponent\n */\n\nexport var getComponentDisplayName = function getComponentDisplayName(ReactComponent) {\n  var componentName = ReactComponent.displayName || ReactComponent.name || (FUNCTION_NAME_REGEXP.exec(ReactComponent.toString()) || [])[1] || 'Component';\n  return 'PureLifecycle(' + componentName + ')';\n};\n/**\n * @function isPlainObject\n *\n * @description\n * is the object passed a plain object\n *\n * @param {any} object the object to test\n * @returns {boolean} is the object a plain object\n */\n\nexport var isPlainObject = function isPlainObject(object) {\n  return typeof object === 'object' && !!object && object.constructor === Object;\n};\n/**\n * @function isReactClass\n *\n * @description\n * is the component passed a react class\n *\n * @param {ReactComponent} ComponentToTest the component to test\n * @returns {boolean} is ComponentToTest a react component instantiated via the class\n */\n\nexport var isReactClass = function isReactClass(ComponentToTest) {\n  return !!(ComponentToTest && ComponentToTest.prototype) && typeof ComponentToTest.prototype.isReactComponent === 'object';\n};\n/**\n * @function getInvalidMethodWarning\n *\n * @description\n * get the warning message to display in non-production environments when the method is invalid\n *\n * @param {string} methodName the name of the invalid method\n * @returns {string} the message to display in the warning\n */\n\nexport var getInvalidMethodWarning = function getInvalidMethodWarning(methodName) {\n  return LIFECYCLE_METHODS[methodName] ? 'The value passed for ' + methodName + ' is not a function, skipping.' : 'The key ' + methodName + ' is not a valid lifecycle method, skipping.';\n};\n/**\n * @function getLifecycleMethodWithPropsInjected\n *\n * @description\n * create a higher-order function that will inject the component's props as the first argument\n *\n * @param {ReactComponent} component the component whose props to retrieve\n * @param {function} method the method to call\n * @returns {function(...Array<*>): *} the higher-order function with props injected as argument\n */\n\nexport var getLifecycleMethodWithPropsInjected = function getLifecycleMethodWithPropsInjected(component, method) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return method.apply(undefined, [component.props].concat(args));\n  };\n};\n/**\n * @function setLifecycleMethods\n *\n * @description\n * assign the lifecycle methods to the instance\n *\n * @param {ReactComponent} component the component whose methods will be augmented\n * @param {Object} methods the methods to apply to the component\n * @param {boolean} injectProps should the props be injected as the method's first parameter\n * @returns {ReactComponent} the augmented component\n */\n\nexport var setLifecycleMethods = function setLifecycleMethods(component, methods, injectProps) {\n  return Object.keys(methods).reduce(function (instance, methodName) {\n    var method = methods[methodName];\n\n    if (LIFECYCLE_METHODS[methodName] && typeof method === 'function') {\n      // eslint-disable-next-line no-param-reassign\n      instance[methodName] = injectProps ? getLifecycleMethodWithPropsInjected(component, method) : method;\n    } else if (!IS_PRODUCTION) {\n      // eslint-disable-next-line no-console\n      console.warn(getInvalidMethodWarning(methodName));\n    }\n\n    return instance;\n  }, component);\n};","map":null,"metadata":{},"sourceType":"module"}
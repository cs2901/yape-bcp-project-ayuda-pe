{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // external dependencies\n\n\nimport React, { Component, PureComponent } from 'react'; // utils\n\nimport { getComponentDisplayName, setLifecycleMethods } from './utils';\n/**\n * @function getClassHoc\n *\n * @description\n * for class-based components, use inheritance inversion to retain state, overriding the lifecycle methods\n *\n * @param {ReactComponent} PassedComponent the component to wrap in an HOC\n * @param {Object} methods the methods to apply to the HOC\n * @param {Object} options the options for customizing implementation\n * @param {boolean} options.injectProps should the props be injected into the lifecycle methods\n * @returns {ReactComponent} HOC inheriting from PassedComponent with lifecycle methods\n */\n\nexport var getClassHoc = function getClassHoc(PassedComponent, methods, _ref) {\n  var _class, _temp;\n\n  var injectProps = _ref.injectProps;\n  var displayName = getComponentDisplayName(PassedComponent);\n  return _temp = _class = function (_PassedComponent) {\n    _inherits(PureLifecycleClass, _PassedComponent);\n\n    function PureLifecycleClass() {\n      _classCallCheck(this, PureLifecycleClass);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var _this = _possibleConstructorReturn(this, _PassedComponent.call.apply(_PassedComponent, [this].concat(args)));\n\n      setLifecycleMethods(_this, methods, injectProps);\n      return _this;\n    }\n\n    PureLifecycleClass.prototype.render = function render() {\n      return _PassedComponent.prototype.render.call(this);\n    };\n\n    return PureLifecycleClass;\n  }(PassedComponent), _class.displayName = displayName, _temp;\n};\n/**\n * @function getFunctionHoc\n *\n * @description\n * for function-based components, use a props proxy wrapper and add the lifecycle methods\n *\n * @param {ReactComponent} PassedComponent the component to wrap in an HOC\n * @param {Object} passedMethods the methods to apply to the HOC\n * @param {Object} options the options for customizing implementation\n * @param {boolean} options.injectProps should the props be injected into the lifecycle methods\n * @param {boolean} options.usePureComponent should the HOC be a PureComponent\n * @returns {ReactComponent} HOC wrapping PassedComponent with lifecycle methods\n */\n\nexport var getFunctionHoc = function getFunctionHoc(PassedComponent, passedMethods, _ref2) {\n  var _class2, _temp2;\n\n  var injectProps = _ref2.injectProps,\n      usePureComponent = _ref2.usePureComponent;\n  var ComponentToExtend = usePureComponent ? PureComponent : Component;\n  var displayName = getComponentDisplayName(PassedComponent);\n\n  var methods = _extends({}, passedMethods);\n\n  var childContextTypes = PassedComponent.childContextTypes ? _extends({}, PassedComponent.childContextTypes) : undefined;\n\n  if (childContextTypes) {\n    // eslint-disable-next-line no-param-reassign\n    delete PassedComponent.childContextTypes;\n  }\n\n  return _temp2 = _class2 = function (_ComponentToExtend) {\n    _inherits(PureLifecycleFunctional, _ComponentToExtend);\n\n    function PureLifecycleFunctional() {\n      _classCallCheck(this, PureLifecycleFunctional);\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var _this2 = _possibleConstructorReturn(this, _ComponentToExtend.call.apply(_ComponentToExtend, [this].concat(args)));\n\n      setLifecycleMethods(_this2, methods, injectProps);\n      return _this2;\n    }\n\n    PureLifecycleFunctional.prototype.render = function render() {\n      return React.createElement(PassedComponent, this.props);\n    };\n\n    return PureLifecycleFunctional;\n  }(ComponentToExtend), _class2.displayName = displayName, _class2.propTypes = PassedComponent.propTypes, _class2.defaultProps = PassedComponent.defaultProps, _class2.contextTypes = PassedComponent.contextTypes, _class2.childContextTypes = childContextTypes, _temp2;\n};","map":null,"metadata":{},"sourceType":"module"}